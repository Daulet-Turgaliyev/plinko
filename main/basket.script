local ball_counter = require "main/ball_counter"
local text_event = require "main/debug_text_events"

go.property("price", 0)
go.property("basket_id", 0) -- добавляем идентификатор корзины

local function set_price_text(self)
	local color = self.price > 0 and vmath.vector4(0.0431, 0.7843, 0.2667, 0.8) or vmath.vector4(1, 0, 0, 1)
	go.set("#price_label", "color", color)
	label.set_text("#price_label", string.format("%+d", self.price))
end

local function set_debug_text(self)
	local count = self.count
	local total_balls = ball_counter.get_total_balls()
	local percentage = (total_balls == 0) and 0 or (count / total_balls) * 100
	label.set_text("#debug_label", string.format("Count: %d\nP: %.2f%%", count, percentage))
end

function init(self)
	self.count = 0
	set_price_text(self)
	set_debug_text(self) 

	local id = go.get_id()
	text_event.add_method(id, function()
		set_debug_text(self)
	end)
end

local function disable_ball(ball_id)
	msg.post(ball_id, "reset_and_disable")
	msg.post("/localGeneratorfactory#balls_spawn_controller", "release_ball", { ball = ball_id })
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		if message.enter then
			particlefx.play("#explosion")
			local other_id = message.other_id
			msg.post("/background#mainScreen", "update_score", { price = self.price })

			-- Отключаем шарик вместо удаления
			disable_ball(other_id)

			-- Обновляем количество шариков и процентное соотношение
			self.count = self.count + 1
			ball_counter.increment_total_balls()
			text_event.call_all_methods()
		end
	end
end

function final(self)
	text_event.remove_method(go.get_id())
end