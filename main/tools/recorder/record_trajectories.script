local last_position = nil
local last_contact_time = nil
local record_count = 5
local timer_interval = 0.2

local function sanitize_filename(str)
	local hashToString = str:gsub("[^%w]", "_")
	local cleaned_string = string.gsub(hashToString, "hash____", "")
	cleaned_string = string.gsub(cleaned_string, "_", "")
	return cleaned_string
end

local function record_position(self)
	if self.recording then
		local pos = go.get_position(self.ball)
		local current_time = socket.gettime()
		local time_delta = 0
		if last_contact_time then
			time_delta = current_time - last_contact_time
		end
		table.insert(self.trajectories, {position = pos, delta = time_delta})
		last_contact_time = current_time
		last_position = pos
	end
end

local function save_trajectories_to_file(trajectories, basketID)
	local sanitized_basketID = sanitize_filename(basketID)
	local file_path = "settings/physics_baked/" .. sanitized_basketID .. ".json"
	local existing_data = {}

	local file = io.open(file_path, "r")
	if file then
		local content = file:read("*a")
		existing_data = json.decode(content) or {}
		file:close()
	end

	if not existing_data[basketID] then
		existing_data[basketID] = {}
	end

	local next_index = 1
	for key, _ in pairs(existing_data[basketID]) do
		local index = tonumber(key:match("record(%d+)"))
		if index and index >= next_index then
			next_index = index + 1
		end
	end

	if next_index <= record_count then
		local record_key = "record" .. next_index
		existing_data[basketID][record_key] = {}
		for _, entry in ipairs(trajectories) do
			table.insert(existing_data[basketID][record_key], {
				position = {
					x = entry.position.x,
					y = entry.position.y
				},
				delta = entry.delta
			})
		end
	else
		print("Максимальное количество записей достигнуто для " .. basketID)
		return
	end

	local json_data = json.encode(existing_data)
	file = io.open(file_path, "w")
	if file then
		file:write(json_data)
		file:close()
	else
		print("Ошибка: Невозможно открыть файл для записи:", file_path)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.ball = go.get_id()
	self.recording = true
	self.trajectories = {}
	record_position(self)

	self.timer_id = timer.delay(timer_interval, true, function()
		record_position(self)
	end)
end

function final(self)
	if self.timer_id then
		timer.cancel(self.timer_id)
		self.timer_id = nil
	end
end

function update(self, dt)
	if self.recording then
		local pos = go.get_position(self.ball)
		if not last_position or pos.x ~= last_position.x or pos.y ~= last_position.y or pos.z ~= last_position.z then
			last_position = pos
		end
	end
end

function on_input(self, action_id, action)
	if action_id == hash("save_record") and action.pressed then
		print("Количество элементов в траекториях:", #self.trajectories)
		save_trajectories_to_file(self.trajectories, self.basketID)
		self.trajectories = {}
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response") then
		record_position(self)
		self.recording = false
		self.basketID = tostring(message.other_id)
		save_trajectories_to_file(self.trajectories, self.basketID)
		msg.post("/background#main", "respawn", nil)
		go.delete(self.ball)
	elseif message_id == hash("contact_point_response") then
		record_position(self)
	end
end
